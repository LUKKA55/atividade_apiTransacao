"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateSecondDigit = exports.calculateFirstDigit = exports.isValidCpf = void 0;
const mod11_1 = require("../utils/mod11");
const isRepetead_1 = require("../utils/isRepetead");
function isValidCpf(value) {
    const cpfClean = value.replace(/\D/g, '');
    const sizeCpf = 11;
    if (cpfClean.length !== 11)
        return false;
    if ((0, isRepetead_1.isRepeated)(cpfClean))
        return false;
    const baseCpf = cpfClean.substring(0, 9);
    const firstDigit = calculateFirstDigit(baseCpf);
    const baseCpfWithFirstDigit = baseCpf.concat(String(firstDigit));
    const secondDigit = calculateSecondDigit(baseCpfWithFirstDigit);
    const cpfCompare = baseCpfWithFirstDigit + secondDigit;
    return cpfClean === cpfCompare;
}
exports.isValidCpf = isValidCpf;
function calculateFirstDigit(baseCpf) {
    const digitsCpfBase = baseCpf.split('');
    let sumDigits = 0;
    let i = 10;
    digitsCpfBase.forEach(digitCpfBase => {
        sumDigits += Number(digitCpfBase) * i;
        i--;
    });
    return ((0, mod11_1.mod11)(sumDigits)) < 2 ? 0 : (11 - (0, mod11_1.mod11)(sumDigits));
}
exports.calculateFirstDigit = calculateFirstDigit;
function calculateSecondDigit(baseCpf) {
    const digitsCpfBase = baseCpf.split('');
    let sumDigits = 0;
    let i = 11;
    digitsCpfBase.forEach(digitCpfBase => {
        sumDigits += Number(digitCpfBase) * i;
        i--;
    });
    return ((0, mod11_1.mod11)(sumDigits)) < 2 ? 0 : (11 - (0, mod11_1.mod11)(sumDigits));
}
exports.calculateSecondDigit = calculateSecondDigit;
